Title         : Optimization of a DNN program on the CPU+MIC
Author        : University of Electronic Secience and Technology of China
Logo          : False
Bibliography: reference.bib


[TITLE]

~ Abstract
This article is a part of competition proposal of Asia Supercomputer Student Challenge. We analysis the `DNN` program, put forward different optimization methods, test them and point their pros and cons. In the end we talk about our limits.
~
# Introduction
There is a program based on a standalone hybrid CPU+MIC platform called `DNN(deep neural network)` needed to be parallelized for obtain better performance. Here is some detailed information about hardware in Figure 1, software configuration in Figure 2.

After optimization, the final program is tested on one computing server in the CPU+MIC hybrid cluster. Performance analysis in this proposal is based on the results of this test. 
~ Figure { #fig-myfigure; caption:"Hardware configuration"}

![2016-02-18 23:01:13屏幕截图]

[2016-02-18 23:01:13屏幕截图]: images/2016-02-18-23-01-13-.png "2016-02-18 23:01:13屏幕截图" { width:auto; max-width:90% }
~

~ Figure { #fig-myfigure; caption:"Software configuration"}
![2016-02-18 23:13:11屏幕截图]

[2016-02-18 23:13:11屏幕截图]: images/2016-02-18-23-13-11-.png "2016-02-18 23:13:11屏幕截图" { width:auto; max-width:90% }
~

# Analysis of the serial program
## Coarse grain analysis
At first, we generate a call graph(Figure 3) by using `Google perfools`, a open source performance profiler, to have a glance though it. Every square represents a function, and the bigger square is, the more time corresponding function cost.
 
~ Figure { #fig-myfigure; caption:"Google Perfools results"}
![100001994364201]

[100001994364201]: images/100001994364201.jpg "100001994364201" { width:auto; max-width:90% }
~
Obviously, the hot spot is something about `MKL`. After googling
and searching Intel document we know that MKL provides `BLAS routinues`, which includes a serial function named `cblas_?gemm`
to compute a matrix-matrix product with general matrices.

But giving that MKL function is well-optimized, we search for all position where `cblas_*gemm` is called. Results show the usage of `cblas_*gemm` appear in file `dnn_func.cpp`, more specifically, in three functions:

* ` extern "C" int dnnForward(NodeArg &nodeArg)`
* ` extern "C" int dnnBackward(NodeArg &nodeArg)`
* ` extern "C" int dnnUpdate(NodeArg &nodeArg)`

They call `MKL` function `cblas_sgemm` many times by `for loop` and 
cost almost 90% of all CPU time. So we guess that those function
 is what we may optimize, aka, hotspots.
The report(see Figure 4.) showed by`Intel VTune`, another profiler, proves our guess.

~ Figure { #fig-myfigure; caption:"Intel VTune top-down tree"}
![2016-02-19 10:36:25屏幕截图]
[2016-02-19 10:36:25屏幕截图]: images/2016-02-19-10-36-25-.png "2016-02-19 10:36:25屏幕截图" { width:auto; max-width:90% }
~

According to a skim through the source code, we could establish a clear structure about this program. To simplify code, original program could be rewritten in pseudocode:
``` Java
1. GetInitFileConfig(cpuArg)
2. While FetchOneChunk(cpuArg, onChunk) do:
3.       While FetchOneBunch(oneChunk, nodeArg) do:
4.            dnnForward(nodeArg)
5.            dnnBackward(nodeArg)
6.            dnnUpate(nodeArg)
7. WriteWts(nodeArg, cpuArg)
8. UninitProgramConfig(cpuArg)

```
There are two nested loop before `dnn*()` series, and 
in each of those processing function many matrix-matrix product are
executed. Whether those hotspots could be parallelized or not depends
on data scale, dependency and so on. Before we discuss some methods and weighed their pros and cons the implementation of `DNN` should be most carefully checked.

## Fine grain analysis

### Matrix size

All `cblas_sgemm` is called like this:
``` java
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans,\
        numN, numA[i], numA[i-1], \
        one, d_Y[i-1], numA[i-1], d_W[i], numA[i], one, d_Y[i], numA[i]);
```
The arguments `numN`, `numA[i]`, `numA[i-1]` indicating the size of the matrices:

 * `d_Y[i-1]` is a `numN` row by `numA[i]` column matrix;
 * `d_W[i]` is a `numN` row by `numA[i-1]` column matrix;
 * `d_Y[i]` is a `numA[i-1]` row by `numA[i]` column matrix.

As we known the bigger matrix size is, the higher degree of `MKL` parallelism is. But in the `DNN` program, the size of matrix is decided by `bunchSize`, a constant integer (&asymp;1024), and element (&asymp;1024) of `dnnLayerArr`, a constant integer array. The two integers are configured by specified file, and we are not allowed to modify it. For this reason there are no sufficiently large matrix to enable `auto offload model` to speed up `DNN`.[@MKL-MIC]

### Cycles index
In the `dnn*` series every loop call `cblas_sgemm` `numN`(&asymp;7) times, which indicates the length of `dnnLayerArr`. It's regretful that the value cannot be modified by us. Giving the number of core(&asymp;24 in CPU or &asymp;60 in MIC) and constant `numN`, it's not wise to parallelize those loops.

# Parallelization design methods

## Fine grain parallelism

In function `dnnForward`, it's easy to observe there is a `for loop` calling `cblas_sgemm`, which nearly cost all CPU time consumed by this function.


## Coarse grain parallelism
To implenment coarse grain parallelism we hope that each thread/process finish large subcomponents. To achieve this goal `DNN` program should be divided into (mostly) independent and similar proportions, and every proportion should be as large as possible.

# Performance optimization methods

## Serial `MKL` function with `OpenMP`
`MKL` function could decide whether to be threaded after a runtime check[@paraMKL]. To maximize the degree of parallelisation we use 
as mentioned above, there isn't large enough cycles index to improve performance.

## `MPI` method

# Testing process and results on the CPU+MIC platform

[BIB]
