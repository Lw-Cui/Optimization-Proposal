Title         : Optimization of a DNN program on the CPU+MIC
Author        : University of Electronic Secience and Technology of China
Logo          : False
Bibliography: reference.bib


[TITLE]

~ Abstract
This article is a part of competition proposal of `ASC(Asia Supercomputer Student Challenge)`. We analysis the `DNN` program, put forward different optimization methods and point their pros and cons. In the end we talk about our shortcomings.
~
# Introduction
In the section a program based on a standalone hybrid CPU+MIC platform called `DNN(deep neural network)` should be parallelized to obtain better performance. The detailed configuration about is as follows: 
~ Figure { #fig-myfigure; caption:"Hardware configuration"}

![2016-02-18 23:01:13屏幕截图]

[2016-02-18 23:01:13屏幕截图]: images/2016-02-18-23-01-13-.png "2016-02-18 23:01:13屏幕截图" { width:auto; max-width:90% }
~

~ Figure { #fig-myfigure; caption:"Software configuration"}
![2016-02-18 23:13:11屏幕截图]

[2016-02-18 23:13:11屏幕截图]: images/2016-02-18-23-13-11-.png "2016-02-18 23:13:11屏幕截图" { width:auto; max-width:90% }
~

# Analysis of the serial program
First, a call graph is generated by using `Google perfools`,
 a open source performance profiler, to have a glance though it. Every square represents a function, and the bigger square is, the more time corresponding function cost.
 
~ Figure { #fig-myfigure; caption:"Google Perfools results"}
![100001994364201]

[100001994364201]: images/100001994364201.jpg "100001994364201" { width:auto; max-width:90% }
~


Obviously, the hot spot is something about `MKL`. After googling
and searching Intel document we know that MKL provides `BLAS routinues`, which includes a serial function named `cblas_?gemm`
to compute a matrix-matrix product with general matrices.

But giving that MKL function is well-optimized, we search for all position where `cblas_*gemm` is called. Results show the usage of `cblas_*gemm` appear in file `dnn_func.cpp`, more specifically, in three function:

* ` extern "C" int dnnForward(NodeArg &nodeArg)`
* ` extern "C" int dnnBackward(NodeArg &nodeArg)`
* ` extern "C" int dnnUpdate(NodeArg &nodeArg)`

They call `MKL` function `cblas_sgemm` many times by `for loop` and 
cost almost 90% of all CPU time. So we guess that those function
 is what we may optimize, aka, hotspots.
The report showed by`Intel VTune`, another profiler, proves our guess.

~ Figure { #fig-myfigure; caption:"Intel VTune top-down tree"}
![2016-02-19 10:36:25屏幕截图]
[2016-02-19 10:36:25屏幕截图]: images/2016-02-19-10-36-25-.png "2016-02-19 10:36:25屏幕截图" { width:auto; max-width:90% }
~

After a skim through the source code, a clear structure 
about the program is established. To simplify describe, original program could be rewritten in pseudocode:
``` Java
1. GetInitFileConfig(cpuArg)
2. While FetchOneChunk(cpuArg, onChunk) do:
3.       While FetchOneBunch(oneChunk, nodeArg) do:
4.            dnnForward(nodeArg)
5.            dnnBackward(nodeArg)
6.            dnnUpate(nodeArg)
7. WriteWts(nodeArg, cpuArg)
8. UninitProgramConfig(cpuArg)

```


There are two nested loop before `dnn*()` processing function, and 
in each of those processing function many matrix-matrix product are
executed. Whether those hotspots could be parallelized or not depends
on data scale, dependency and so on. In the rest of this article some
methods are considered and weighed their pros and cons.

# Fine grain parallelism
In fine grain parallelism a thorough check is necessary. It's better to look through the whole top-down tree rendered by `Intel VTune` and to find out performance-critical loop. Attention should be given to the `dnn*` function series.

In function `dnnForward`, it's easy to observe there is a `for loop` calling `cblas_sgemm`, which nearly cost all CPU time consumed by this function. But there is some detail should be consider in before optimization.

## Matrix size

All `cblas_sgemm` is called like this:
``` java
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, numN, numA[i], numA[i-1], \
  						one, d_Y[i-1], numA[i-1], d_W[i], numA[i], one, d_Y[i], numA[i]);
```
The arguments `numN`, `numA[i]`, `numA[i-1]` indicating the size of the matrices:

 * `d_Y[i-1]` is a `numN` row by `numA[i]` column matrix;
 * `d_W[i]` is a `numN` row by `numA[i-1]` column matrix;
 * `d_Y[i]` is a `numA[i-1]` row by `numA[i]` column matrix.

As we known the bigger matrix size is, the higher degree of `MKL` parallelism is. But in the `DNN` program, the size of matrix is decided by `bunchSize`, a constant integer, and `dnnLayerArr`, a constant integer array. The two integers are configured by specified file, and we are not allowed to modify it. For this reason there are no sufficiently large matrix to enable `auto offload model` to speed up `DNN`.[@MKL-MIC]


## Cycles index


# Coarse grain parallelism
To implenment coarse grain parallelism we hope that each thread/process finish large subcomponents. To achieve this goal `DNN` program should be divided into (mostly) independent and similar proportions, and every proportion should be as large as possible.

[BIB]
